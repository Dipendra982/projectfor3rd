// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  username  String
  email     String   @unique
  password  String
  img       String
  country   String
  phone     String
  desc      String
  isSeller  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  gigs              Gig[]
  soldOrders        Order[] @relation("SellerOrders")
  boughtOrders      Order[] @relation("BuyerOrders")
  sellerConversations Conversation[] @relation("SellerConversations")
  buyerConversations  Conversation[] @relation("BuyerConversations")
  messages          Message[]
  reviews           Review[]

  @@map("users")
}

model Gig {
  id           String   @id @default(cuid())
  userId       String
  title        String
  desc         String
  totalStars   Int      @default(0)
  starNumber   Int      @default(0)
  cat          String
  price        Int
  cover        String
  images       String?  // JSON string for array storage
  shortTitle   String?
  shortDesc    String?
  deliveryTime Int
  revisionNumber Int?
  features     String?  // JSON string for array storage
  sales        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders  Order[]
  reviews Review[]

  @@map("gigs")
}

model Order {
  id             String      @id @default(cuid())
  gigId          String
  img            String?
  title          String
  price          Int
  sellerId       String
  buyerId        String
  isCompleted    Boolean     @default(false)
  paymentIntent  String      @unique
  status         String      @default("PENDING")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  gig    Gig  @relation(fields: [gigId], references: [id], onDelete: Cascade)
  seller User @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer  User @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Conversation {
  id           String   @id @default(cuid())
  conversationId String @unique // Custom conversation ID
  sellerId     String
  buyerId      String
  readBySeller Boolean
  readByBuyer  Boolean
  lastMessage  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  seller   User      @relation("SellerConversations", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer    User      @relation("BuyerConversations", fields: [buyerId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  desc           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Review {
  id        String   @id @default(cuid())
  gigId     String
  userId    String
  star      Int
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  gig  Gig  @relation(fields: [gigId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}
